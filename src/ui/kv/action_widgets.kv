<ActionArrow>:
    canvas:
        Color:
            rgba: self.r, self.g, self.b, self.a
        Line:
            points: [self.x, self.y-20, self.x, self.y+10, self.x-10, self.y, self.x+10, self.y, self.x, self.y+10]
            joint: 'round'
            cap: 'none'
            width: 3
            close: False
    canvas.before:
        PushMatrix
        Rotate:
            angle: self.angle
            origin: self.pos
    canvas.after:
        PopMatrix   


<ActionUnitMove>:
    canvas.before:
        PushMatrix
        Rotate:
            angle: self.angle
            origin: self.pos
    canvas:
        Color:
            rgba: self.r, self.g, self.b, self.a
        Line:
            points: [self.x - self.width / 2, self.y + self.height / 2, self.x, self.y + self.height, self.x + self.width / 2, self.y + self.height / 2]
            joint: 'bevel'
            cap: 'none'
            width: 3
            close: False
        Ellipse:
            size: self.size
            pos: (self.x - self.width / 2, self.y - self.height / 2)
    canvas.after:
        PopMatrix


<ActionNMIMove>:
    canvas.before:
        PushMatrix
        Rotate:
            angle: self.angle
            origin: self.pos
    canvas:
        Color:
            rgba: self.r, self.g, self.b, self.a
        Line:
            points: [self.origin_x + (self.x - self.origin_x) / 2 - self.width / 2, self.origin_y + (self.y - self.origin_y) / 2, self.origin_x + (self.x - self.origin_x) / 2, self.origin_y + (self.y - self.origin_y) / 2 + self.height / 2, self.origin_x + (self.x - self.origin_x) / 2 + self.width / 2, self.origin_y + (self.y - self.origin_y) / 2]
            width: 3
            close: False
        Line:
            points: [self.origin_x, self.origin_y, self.x, self.y]
            width: 3
            close: False
        Ellipse:
            size: self.size
            pos: (self.x - self.width / 2, self.y - self.height / 2)
        Ellipse:
            size: self.size
            pos: (self.origin_x - self.width / 2, self.origin_y - self.height / 2)
    canvas.after:
        PopMatrix
