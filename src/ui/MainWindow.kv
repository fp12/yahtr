#:kivy 1.9.1
#:import math math

#<Widget>:
#    canvas.after:
#        Line:
#            rectangle: self.x+1,self.y+1,self.width-1,self.height-1
#            dash_offset: 5
#            dash_length: 3

#<ScatterLayout>:
#    canvas.after:
#        Color:
#            rgb: 1,0,0
#        Line:
#            rectangle: self.x+1,self.y+1,self.width-1,self.height-1
#        Color:
#            rgb: 0,0,1
#        Ellipse:
#            pos: self.center_x-4, self.center_y-4
#            size: 8, 8

<Tile>
    canvas:
        Color:
            rgba: self.r, self.g, self.b, self.a
        Mesh:
            vertices: (self.x + math.cos(math.pi/3 * 0) * self.radius, self.y + math.sin(math.pi/3 * 0) * self.radius, 0, 0, self.x + math.cos(math.pi/3 * 1) * self.radius, self.y + math.sin(math.pi/3 * 1) * self.radius, 0, 0, self.x + math.cos(math.pi/3 * 2) * self.radius, self.y + math.sin(math.pi/3 * 2) * self.radius, 0, 0, self.x + math.cos(math.pi/3 * 3) * self.radius, self.y + math.sin(math.pi/3 * 3) * self.radius, 0, 0, self.x + math.cos(math.pi/3 * 4) * self.radius, self.y + math.sin(math.pi/3 * 4) * self.radius, 0, 0, self.x + math.cos(math.pi/3 * 5) * self.radius, self.y + math.sin(math.pi/3 * 5) * self.radius, 0, 0)
            indices: (0, 1, 2, 3, 4, 5)
            mode: "triangle_fan"
    Label:
        index: 0
        size: root.size
        center: root.pos
        text: root.debug_label
        #text_size: self.size
        #halign: 'center'
        #valign: 'middle'
        color: 1, 0, 0, 1

<Unit>
    canvas:
        Color:
            rgba: self.r, self.g, self.b, self.a
        Mesh:
            vertices: (self.x + math.cos(math.pi/3 * 0) * self.radius, self.y + math.sin(math.pi/3 * 0) * self.radius, 0, 0, self.x + math.cos(math.pi/3 * 1) * self.radius, self.y + math.sin(math.pi/3 * 1) * self.radius, 0, 0, self.x + math.cos(math.pi/3 * 2) * self.radius, self.y + math.sin(math.pi/3 * 2) * self.radius, 0, 0, self.x + math.cos(math.pi/3 * 3) * self.radius, self.y + math.sin(math.pi/3 * 3) * self.radius, 0, 0, self.x + math.cos(math.pi/3 * 4) * self.radius, self.y + math.sin(math.pi/3 * 4) * self.radius, 0, 0, self.x + math.cos(math.pi/3 * 5) * self.radius, self.y + math.sin(math.pi/3 * 5) * self.radius, 0, 0)
            indices: (0, 1, 2, 3, 4, 5)
            mode: "triangle_fan"
        #Color:
        #    rgb: 0.5, 0.5, 0.5
        #Mesh:
        #    vertices: (self.x + math.cos(math.pi/3 * 1) * self.radius, self.y + math.sin(math.pi/3 * 1) * self.radius, 0, 0, self.x + math.cos(math.pi/3 * 2) * self.radius, self.y + math.sin(math.pi/3 * 2) * self.radius, 0, 0, self.x + math.cos(math.pi/3 * 2) * (self.radius - self.front_radius), self.y + math.sin(math.pi/3 * 2) * (self.radius - self.front_radius), 0, 0, self.x + math.cos(math.pi/3 * 1) * (self.radius - self.front_radius), self.y + math.sin(math.pi/3 * 1) * (self.radius - self.front_radius), 0, 0)
        #    indices: (0, 1, 2, 3)
        #    mode: "triangle_fan"

<Selector>:
    canvas:
        Color:
            rgba: self.r, self.g, self.b, self.a
        Line:
            points: [self.x + self.coss[0] * (self.radius + self.margin/2), self.y + self.sins[0] * (self.radius + self.margin/2), self.x + self.coss[1] * (self.radius + self.margin/2), self.y + self.sins[1] * (self.radius + self.margin/2), self.x + self.coss[2] * (self.radius + self.margin/2), self.y + self.sins[2] * (self.radius + self.margin/2), self.x + self.coss[3] * (self.radius + self.margin/2), self.y + self.sins[3] * (self.radius + self.margin/2), self.x + self.coss[4] * (self.radius + self.margin/2), self.y + self.sins[4] * (self.radius + self.margin/2), self.x + self.coss[5] * (self.radius + self.margin/2), self.y + self.sins[5] * (self.radius + self.margin/2)]
            joint: 'bevel'
            cap: 'none'
            width: self.margin
            close: True

<ActionArrow>:
    canvas:
        Color:
            rgba: self.r, self.g, self.b, self.a
        Line:
            points: [self.x, self.y-10, self.x, self.y+5, self.x-5, self.y, self.x+5, self.y, self.x, self.y+5]
            joint: 'bevel'
            cap: 'none'
            width: 1
            close: False
    canvas.before:
        PushMatrix
        Rotate:
            angle: self.angle
            origin: self.pos
    canvas.after:
        PopMatrix


<ActionBubble>:
    size: 20, 20
    canvas:
        Color:
            rgba: self.r, self.g, self.b, self.a
        Ellipse:
            pos: root.center_x-root.size[0]/2, root.center_y-root.size[1]/2
            size: root.size
    Label:
        center: root.center
        text: root.bubble_txt
        text_size: self.size
        halign: 'center'
        valign: 'middle'
        color: 0, 0, 0, 0.5
